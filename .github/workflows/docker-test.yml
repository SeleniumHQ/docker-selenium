name: Test Docker Selenium

on:
  workflow_call:
    inputs:
      release:
        description: 'Test a new release process'
        required: false
        type: string
        default: 'false'
  workflow_dispatch:
    inputs:
      request-timeout:
        description: 'Test parameter for different request timeout'
        required: false
        default: '400'
      parallel-hardening:
        description: 'Test parameter to enable hardening parallel tests'
        required: false
        default: 'true'
      log-level:
        description: 'Test parameter for different log level'
        required: false
        default: 'INFO'

permissions:
  contents: read

jobs:
  build-and-test:
    name: Test Docker Selenium
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - test-strategy: test
            use-random-user: true
            test-video: false
            build-all: true
          - test-strategy: test
            use-random-user: false
            test-video: false
            build-all: true
          - test-strategy: test_video
            use-random-user: false
            test-video: true
            build-all: false
          - test-strategy: test_video_dynamic_name
            use-random-user: false
            test-video: true
            build-all: false
          - test-strategy: test_video_standalone
            use-random-user: false
            test-video: true
            build-all: false
          - test-strategy: test_node_docker
            use-random-user: false
            test-video: true
            build-all: false
          - test-strategy: test_standalone_docker
            use-random-user: false
            test-video: true
            build-all: false
          - test-strategy: test_parallel
            use-random-user: false
            test-video: false
            build-all: false
          - test-strategy: test_node_relay
            use-random-user: false
            test-video: false
            build-all: false
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false
      - name: Checkout code
        uses: actions/checkout@main
      - name: Set up containerd image store feature
        if: matrix.test-strategy != 'test_node_relay'
        uses: nick-invision/retry@master
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
            make chart_setup_env
            make set_containerd_image_store
      - name: Output Docker info
        run: docker info
      - name: Set up Python
        uses: actions/setup-python@main
        with:
          python-version: '3.11'
          check-latest: true
      - name: Enable KVM
        if: matrix.test-strategy == 'test_node_relay'
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
      - name: Get branch name (only for push to branch)
        if: github.event_name == 'push'
        run: echo "BRANCH=$(echo ${PUSH_BRANCH##*/})" >> $GITHUB_ENV
        env:
          PUSH_BRANCH: ${{ github.ref }}
      - name: Get target branch name (only for PRs)
        if: github.event_name == 'pull_request'
        run: echo "BRANCH=$(echo ${TARGET_BRANCH##*/})" >> $GITHUB_ENV
        env:
          TARGET_BRANCH: ${{ github.head_ref }}
      - name: Output branch name
        run: echo ${BRANCH}
      - name: Set Selenium base version
        uses: ./.github/actions/get-latest-upstream
        with:
          release: ${{ inputs.release || false }}
          gh_cli_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Sets build date
        run: |
          echo "BUILD_DATE=$(date '+%Y%m%d')" >> $GITHUB_ENV
          echo "AUTHORS=${AUTHORS}" >> $GITHUB_ENV
        env:
          AUTHORS: ${{ vars.AUTHORS || 'SeleniumHQ' }}
      - name: Build Docker images
        uses: nick-invision/retry@master
        if: matrix.build-all == true
        with:
          timeout_minutes: 20
          max_attempts: 3
          retry_wait_seconds: 60
          command: |
            VERSION=${BRANCH} BUILD_DATE=${BUILD_DATE} make build
      - name: Pre-build to reduce logs in test phase
        uses: nick-invision/retry@master
        if: matrix.build-all != true
        with:
          timeout_minutes: 20
          max_attempts: 3
          retry_wait_seconds: 60
          command: |
            VERSION=${BRANCH} BUILD_DATE=${BUILD_DATE} make hub
            VERSION=${BRANCH} BUILD_DATE=${BUILD_DATE} make chrome
            VERSION=${BRANCH} BUILD_DATE=${BUILD_DATE} make firefox
            VERSION=${BRANCH} BUILD_DATE=${BUILD_DATE} make edge
      - name: Set test parameters
        if: (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        run: |
          echo "LOG_LEVEL=${LOG_LEVEL}" >> $GITHUB_ENV
          echo "TEST_PARALLEL_HARDENING=${TEST_PARALLEL_HARDENING}" >> $GITHUB_ENV
          echo "REQUEST_TIMEOUT=${REQUEST_TIMEOUT}" >> $GITHUB_ENV
        env:
          LOG_LEVEL: ${{ github.event.inputs.log-level || 'INFO' }}
          TEST_PARALLEL_HARDENING: ${{ github.event.inputs.parallel-hardening || 'true' }}
          REQUEST_TIMEOUT: ${{ github.event.inputs.request-timeout || '400' }}
      - name: Run Docker Compose to ${{ matrix.test-strategy }}
        uses: nick-invision/retry@master
        with:
          timeout_minutes: 20
          max_attempts: 2
          retry_wait_seconds: 60
          command: |
            USE_RANDOM_USER_ID=${{ matrix.use-random-user }} VERSION=${BRANCH} BUILD_DATE=${BUILD_DATE} make ${{ matrix.test-strategy }}
      - name: Upload recorded video
        if: matrix.test-video == true
        uses: actions/upload-artifact@main
        with:
          name: "${{ matrix.test-strategy }}_artifacts"
          path: ./tests/videos/
      - name: Clean up Docker
        if: always()
        run: docker system prune -af
